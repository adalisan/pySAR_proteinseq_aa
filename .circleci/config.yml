version: 2.1

#import python and gcp cli
orbs:
  python: circleci/python@0.3.2
  codecov: codecov/codecov@1.0.2
  # gcp-cli: circleci/gcp-cli@2.4.0

jobs:
  #build environment
  build-and-test:
    executor: python/default
    environment:
      PYTHONPATH=./pySAR
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - python/test
  
  #linting and code coverage of project
  lint-and-coverage:
    executor: python/default
    description: |
      Running lint using flake8 and coverage report
    environment:
      PYTHONPATH=./pySAR
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          name: Linter
          command: |
            pip install flake8
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > /tmp/flake8_output.txt || true
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> /tmp/flake8_output.txt || true
      - run:
          name: Coverage
          command: |
            pip install coverage
            pip install codecov
            pip install pytest-cov
            pytest --cov-report term --cov=test_pySAR tests/ > /tmp/coverage_report.txt || true
            cat /tmp/coverage_report.txt
        # coverage run 
        # coverage report > /tmp/coverage_report.txt || true
     #upload temp artifacts
      - store_artifacts:
          path: /tmp/coverage_report.txt
          destination: artifacts-file
      - store_artifacts:
          path: /tmp/flake8_output.txt
          destination: flake8-output.txt

  safety-and-bandit:
      executor: python/default
      description: |
        Running package safety and bandit security check modules
      environment:
        PYTHONPATH=./pySAR
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        #package vulnerability check
        - run:
            name: Safety
            command: |
              pip install safety
              safety check > /tmp/package_safety_output.txt || true
              cat /tmp/package_safety_output.txt
        #bandit security check
        - run:
            name: Bandit
            command: |
              pip install bandit
              bandit -r . > /tmp/bandit_output.txt || true
              cat /tmp/bandit_ouput.txt
        #store temp artifacts 
        - store_artifacts:
            path: /tmp/package_safety_output.txt
            destination: safety-output.txt
        - store_artifacts:
            path: /tmp/bandit_output.txt
            destination: bandit-output.txt

  #check successful installation of latest pySAR version
  pySAR-pipeline:
      executor: python/default
      description: |
        Running pySAR example pipeline
      environment:
        PYTHONPATH=./pySAR
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run:
            name: PySAR pipeline test
            command: |
              pip3 install pySAR --upgrade

#execute individual jobs in workflow        
workflows:
  main:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - lint-and-coverage:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - safety-and-bandit:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - pySAR-pipeline:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master