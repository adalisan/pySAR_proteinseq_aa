<<<<<<< HEAD
name: Deploy to PyPI ðŸ“¦

# trigger deploy_to_pypi workflow once deploy_to_testpypi has successfully completed
=======

name: Deploy to PyPI ðŸ“¦ 

# trigger deploy workflow once build and test workflow has successfully completed
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
on:
  workflow_run:
    workflows: [Deploy to TestPyPI ðŸ“¦]
    types:
      - completed
<<<<<<< HEAD

=======
      
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
  # allow for workflow to be manually initiated from the Actions tab
  workflow_dispatch:

jobs:
<<<<<<< HEAD
  build:
=======
  # build and deploy
  build:
    
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
    name: Deploy to PyPI ðŸ“¦
    runs-on: ubuntu-latest         # platform: [ubuntu-latest, macos-latest, windows-latest]
    strategy:
      matrix:
<<<<<<< HEAD
        python-version: [3.8]  #deploying using one Python version on 1 runner
=======
        python-version: [3.8]  #deploying using one Python version on 1 runner 
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

<<<<<<< HEAD
    # install all required modules and dependancies using pip and setup.py installation
=======
    # install all required modules and dependancies using pip and setup.py installation 
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python3 -m pip install setuptools wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python3 setup.py install
<<<<<<< HEAD

    # Build package and upload to PyPI
=======
        
    # build distribution package of software and upload to the PYPi server
#     - name: Build and Upload TestPyPI
#       run: |
#         python3 setup.py sdist bdist_wheel
#         python3 -m twine upload dist/*
        
#     - name: Publish distribution ðŸ“¦ to PyPI
#       if: startsWith(github.ref, 'refs/tags')
#       uses: pypa/gh-action-pypi-publish@master
#       with:
#         password: ${{ secrets.PYPI_TOKEN }}
#     - name: Publish package
#       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#       uses: pypa/gh-action-pypi-publish@release/v1
#       with:
#         user: __token__
#         password: ${{ secrets.PYPI_TOKEN }}
      # Build and upload to PyPI
      
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
    - name: "Builds and uploads to PyPI"
      run: |
        python3 setup.py sdist bdist_wheel
        python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    #sleep for 30 seconds to ensure that distribution package has successfully been uploaded to pyPI
    - name: Wait / Sleep
      uses: jakejarvis/wait-action@v0.1.0

<<<<<<< HEAD
    # download package of pySAR from PYPI server to ensure it uploaded correctly
    - name: Install pySAR from PyPI
=======
    # build distribution package of software and upload to the test PYPi server
    - name: Install pySAR from Test PyPI
>>>>>>> a0598ffeb0c057700cede56f2b509cc7110469cf
      run: |
        pip install pySAR
        echo "pySAR successfully installed"
